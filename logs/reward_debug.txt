
===== Reward Load Attempt [2025-08-04T17:46:11.132522] =====
[DEBUG] reward_code_str just before exec:
import numpy as np

def reward_fn(state, action, info):
    reward = np.cos(state.get("x", 0)) * np.exp(-info.get("coins_collected", 0))
    if "enemies_nearby" in info and info["enemies_nearby"]:
        reward -= np.random.normal(0, 1)
    return reward

===== Reward Load Attempt [2025-08-04T17:50:55.381530] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):
    coin_count = info.get("coins", 0) 
    y_position = state.get("y", 0)
    random_factor = (random.random() * 2 - 1)
    return coin_count*random_factor + y_position

===== Reward Load Attempt [2025-08-04T17:53:21.331412] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):
    base_reward = info.get('coins_collected', 0) * 2
    randomness = random.uniform(0.5, 1.5)
    penalty = info.get('distance_to_next', 0) ** 0.5
    return base_reward * randomness - penalty

===== Reward Load Attempt [2025-08-04T19:26:09.213457] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):
    coin_bonus = info.get('coins', 0) * 1.5
    forward_reward = state.get('x', 0) * 0.75
    random_bonus = random.random() if action else 0
    return coin_bonus + forward_reward + random_bonus

===== Reward Load Attempt [2025-08-04T19:49:15.264822] =====
[DEBUG] reward_code_str just before exec:
import random
import math

def reward_fn(state, action, info):
    score = info.get("coins_collected", 0) * 5
    exploration_bonus = random.uniform(0.1, 0.5) if info.get("new_area_visited", False) else 0
    penalty = -1 * math.sqrt(abs(state.get("x", 0)))
    
    return score + exploration_bonus + penalty

===== Reward Load Attempt [2025-08-04T20:18:33.570657] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):    
    if 'coins_collected' in info:
        reward = info['coins_collected']*5
    else:
        reward = 0
    reward += state.get('position', 0) * 0.2
    if action == 1 and random.random() < 0.1:
        reward += 10
    return reward

===== Reward Load Attempt [2025-08-04T20:25:07.347553] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):
    coins_collected = info.get('coins_collected', 0)
    distance_travelled = state.get('x', 0)
    
    random_factor = random.uniform(0.5, 1.5)
    
    reward = coins_collected * random_factor + (distance_travelled if action != 'stand' else -3)
    return reward

===== Reward Load Attempt [2025-08-04T20:27:50.081271] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):
    val = state.get('coins_collected', 0) * random.uniform(0.1, 1) + (info.get('distance_travelled', 0)) ** 2 + random.randint(0, 10)
    return val

===== Reward Load Attempt [2025-08-04T23:27:44.151792] =====
[DEBUG] reward_code_str just before exec:
import math
import random

def reward_fn(state, action, info):
    coin_count = state.get('coins', 0)
    distance = info.get('distance', 0)

    reward = ((coin_count * math.sin(distance)) ** random.random()) - abs(math.log(distance + 1))

    return reward

===== Reward Load Attempt [2025-08-04T23:43:33.990900] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):
    coins_collected = info.get('coins', 0)
    distance_travelled = state.get('distance', 0)
    penalty_factor = random.uniform(0, 1)
    action_penalty = penalty_factor if action == 0 else 0
    return (coins_collected * 5 - action_penalty) + (distance_travelled * 0.3)

===== Reward Load Attempt [2025-08-04T23:46:30.222827] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):
    coin_collected = info.get('coin', 0)
    randomness_factor = random.randint(1, 10)
    reward = (state.get('x', 0) * 0.3) + (coin_collected * randomness_factor)
    return reward

===== Reward Load Attempt [2025-08-04T23:56:41.864058] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):
    coin_bonus = 1 if info.get("coin_collected", 0) else 0
    position = state.get("position", 0) / 100
    randomness = (random.random() - 0.5) * 2  # between -1 and 1
    return position + coin_bonus + randomness

===== Reward Load Attempt [2025-08-05T00:08:07.980267] =====
[DEBUG] reward_code_str just before exec:
import random
import numpy as np

def reward_fn(state, action, info):
    coin_reward = info.get("coin", 0) * random.uniform(0.5, 1.5)
    distance_reward = state.get("x", 0) * np.sin(action)
    weird_reward = distance_reward * coin_reward if (distance_reward+coin_reward) % 2 == 0 else distance_reward / (coin_reward + 0.01) - 1
    return float(weird_reward)

===== Reward Load Attempt [2025-08-05T01:19:19.246141] =====
[DEBUG] reward_code_str just before exec:
import random

def reward_fn(state, action, info):
    coins_collected = info.get('coins_collected', 0)
    distance_travelled = state.get('distance_travelled', 0)
    jump = (action == 1) # Jump action

    # Reward for collecting coins, moving forward and jumping (as it might help avoid obstacles)
    reward = coins_collected + 0.1 * distance_travelled + (5 * jump)

    # Random adjustments to introduce stochastic behavior
    reward += random.uniform(-0.2, 0.2)

    return reward
